<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[鼠标点击特效]]></title>
    <url>%2F2019%2F08%2F21%2F%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%88%86%E7%82%B8%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[1.主题配置文件找 layout 文件夹中的 _layout.swig在body中加入 12345&#123;% if theme.fireworks %&#125; &lt;canvas class=&quot;fireworks&quot; style=&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;/canvas&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/animejs/2.2.0/anime.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/fireworks.js&quot;&gt;&lt;/script&gt; &#123;% endif %&#125; 2.主题配置文件找source 文件夹中的 js新建src文件夹，在src新建fireworks.js 1&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;&quot;use strict&quot;;function updateCoords(e)&#123;pointerX=(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t=anime.random(0,360)*Math.PI/180,a=anime.random(50,180),n=[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=colors[anime.random(0,colors.length-1)],a.radius=anime.random(16,32),a.endPos=setParticuleDirection(a),a.draw=function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a=&#123;&#125;;return a.x=e,a.y=t,a.color=&quot;#F00&quot;,a.radius=0.1,a.alpha=0.5,a.lineWidth=6,a.draw=function()&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=1&#125;,a&#125;function renderParticule(e)&#123;for(var t=0;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;function animateParticules(e,t)&#123;for(var a=createCircle(e,t),n=[],i=0;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:0.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n=this,i=arguments;clearTimeout(a),a=setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl=document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx=canvasEl.getContext(&quot;2d&quot;),numberOfParticules=30,pointerX=0,pointerY=0,tap=&quot;mousedown&quot;,colors=[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize=debounce(function()&#123;canvasEl.width=2*window.innerWidth,canvasEl.height=2*window.innerHeight,canvasEl.style.width=window.innerWidth+&quot;px&quot;,canvasEl.style.height=window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render=anime(&#123;duration:1/0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!==e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!==e.target.id&amp;&amp;&quot;A&quot;!==e.target.nodeName&amp;&amp;&quot;IMG&quot;!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;; 3.主题配置文件末尾加入： # Fireworks fireworks: true]]></content>
      <categories>
        <category>页面框架</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JAVA面向对象（2)]]></title>
    <url>%2F2019%2F08%2F21%2Fjava2%2F</url>
    <content type="text"><![CDATA[类 类的组成：变量，方法，构造方法 构造方法：与类同名，不返回数字类型 方法 实例方法 静态方法 方法重载：该方法有多个名字但参数的个数和类型不同，可以用来实现多态 变量： 实例变量 静态变量 类的对象：可以访问类中的方法 继承： 声明 子类 extends 父类 继承父类的变量和方法 可以修改父类的变量和方法，还可以添加自己的变量和方法，名字相同就会进行覆盖和修改 关键字：必须放在第一句this表示该类的对象 super：用于访问父类的变量和方法（一般用于同名），可用来调用父类的构造方法 父类对象和子类对象的转换（好像是上转型对象） 包： import用于导入其他类，放在文件的首位 同包类可以相互访问,反之不得 控制符 static final abstract 接口：]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[JAVA面向对象（1)]]></title>
    <url>%2F2019%2F08%2F21%2Fjava1%2F</url>
    <content type="text"><![CDATA[基本数据类型 整数型 进制的表示 浮点数型 注意单精度的书写要加f 逻辑型—boolean 字符型—char 数据类型的转换 标识符 可以由数字，字母，下划线_,美元符号$组成 不能以数字开头 通常类名开头要大写（java大小写敏感） 其余的小写字母开头 数组 数组的创建 数组的声明 int []a;(不能声明数组的长度) 为数组分配内存空间 a=new[5] 数组的定义 数组的引用类型int []a=new int[5]这里的a就是引用 数组默认初始化为0或者null 数组的遍历： 简单的循环语句 也可以用for(int age;age){}只读遍历 数组长度：数组名.length 可以获取 数组的复制：Array.Copy]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[视频嵌入]]></title>
    <url>%2F2019%2F08%2F20%2F%E8%A7%86%E9%A2%91%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>外接嵌入</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[pr]]></title>
    <url>%2F2019%2F08%2F20%2FPr%2F</url>
    <content type="text"><![CDATA[教程推荐 :https://www.bilibili.com/video/av5540953/?p=9 画面放大缩小： 双击预览视频区 弹幕制作： 使用默认静态字幕弹幕效果：使用关键帧 -- 运动 设置关键帧的开始和结束位置（&lt;span style=&quot;color: red&quot;&gt;记得打点&lt;/span&gt;） 视频速度：右键更改速度比例(鬼畜) 视频的衔接：左侧工具栏找到 - 视频过度 视频结尾：使用关键帧 – 运动 设置关键帧的开始和结束位置（记得打点） 导出：h.264 视频转场： 1.全选素材 2.Ctrl+d 3.转场素材可去设置默认 批量缩放素材： 找到首选项中的默认媒体缩放设置为 帧大小 批量调色： 1.效果控件将颜色复制在删掉 2.找到只要进行粘贴]]></content>
      <categories>
        <category>剪辑软件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[音乐载入]]></title>
    <url>%2F2019%2F08%2F19%2F%E9%9F%B3%E4%B9%90%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>外接嵌入</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[博客搭建]]></title>
    <url>%2F2019%2F08%2F19%2Fhexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[1.下载node.js 下载地址 2.下载Git 下载地址 3.安装Hexo 官方Api 在新的文件夹右键 Git Bash Here 在Git中输入 npm install -g hexo-cli hexo init npm install 4.更换主题(本人使用NexT主题,NexT) 主题下载 更换主题：到根目录 _config.yml 找到 theme 5.更改语言 到根目录 _config.yml 将 language: 改为 zh-CN 6.增加标签和分类页 在主题配置文件找到 Menu Settings 将要打开的功能去掉# 7.更换头像 在主题配置文件找到 avatar 将url更改 8.更改标题和作者 站点配置文件Ctrl+F 搜索title，author将其更改 9.启用社交链接 在主题配置文件找到 social 将需要的功能打开，也可以自行添加 10.打开打赏功能 在主题配置文件找到 reward_settings 将false 改为true 找到 reward 更改图片地址 11.打开订阅公众号 在主题配置文件找到 wechat_subscriber 将false 改为true 12.添加动态背景 在主题配置文件找到 canvas_nest 将 enable: false更改为 true 可能需要下载库链接 13.设置阅读全文 1.打开source 在文章中加入&lt; !–more–&gt;(无空格) 2.在主题配置文件找到 auto_excerpt 将false 改为true ，length自行调节 14.添加评论,搜索，统计，分享，字数统计，阅读市场功能(可参照NexT使用文档) NexT使用文档 15.部署到Github(可参照NexT使用文档)]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[页面框架]]></title>
    <url>%2F2019%2F08%2F18%2F%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[链接 百度 图片 &lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;index.css&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;top&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;div id=&quot;vlog&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;vlog-left&quot;&gt; &lt;/div&gt; &lt;div class=&quot;vlog-right&quot;&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt; &lt;/html&gt; *{ padding: 0; margin: 0; } #top{ width: 100%; height: 100px; border: 1px solid red; } .container{ width: 70%; height: 100%;; margin: 0px auto; border: 1px solid red; } #vlog{ width: 100%; height: 400px; border: 1px solid red; } .container .vlog-left{ width: 18%; height: 100%; border: 1px solid red; float: left; } .container .vlog-right{ width: 80%; height: 100%; float: right; border: 1px solid red; }]]></content>
      <categories>
        <category>页面框架</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello]]></title>
    <url>%2F2019%2F08%2F18%2Fhello%2F</url>
    <content type="text"><![CDATA[(一)C语言的结构 １。程序的构成，main函数和其他函数。２。头文件、数据说明、函数的开始和结束标志。３。源程序的书写格式。４。C语言的风格。(二)数据类型及其运算１。C的数据类型（基本类型、构造类型、指针类型、空类型）及其定义方法。２。C运算符的种类、运算优先级和结合性。３。不同类型数据间的转换与运算。４。C表达式类型（赋值表达、算术表达式、关系表达式、逻辑表达式、条件表达式、逗号表达式）和求值规则。(三)基本语句１。表达式语句，空语句，复合语句。２。数据的输入与输出，输入输出函数的调用。３。复合语句。４。goto语句和语句标号的使用。(四)选择结构程序设计１。用if语句实现选择结构。２。用switch语句实现多分支选择结构。３。选择结构的嵌套(五)循环结构程序设计１。for循环结构。２。while和dowhile循环结构。３。continue语句和break语句。４。循环的嵌套。(六)数组定义和引用１。一维数组和多维数组的定义、初始化和引用。２。字符串与字符数组。(七)函数１。库函数的正确调用。２。函数的定义方法。３。函数的类型和返回值。４。形式参数与实在参数，参数值的传递。５。函数的正确调用，嵌套调用，递归调用。６。局部变量和全局变量。７。变量的存储类别（自动、静态、寄存器、外部），变量的作用域和生存期。８。内部函数与外部函数。(八)编译预处理１。宏定义：不带参数的宏定义；带参数的宏定义。２。“文件包含”处理(九)指针１。指针与指针变量的概念，指针与地址运算符。２。变量、数组、字符串、函数、结构体的指针以及指向变量、数组、字符串、函数、结构体的指针变量。通过指针引用以上各类型数据。３。用指针作函数参数。４。返回指针值的指针函数。５。指针数组，指向指针的指针，main函数的命令行参数。(十)结构体（即“结构”）与共用体（即“联合”）１。结构体和共用体类型数据的定义方法和引用方法。２。用指针和结构体构成链表，单向链表的建立、输出、删除与插入。(十一)位运算１。位运算符的含义及使用。２。简单的位运算。(十二)文件操作只要求缓冲文件系统（即高级磁盘I/O系统），对非标准缓冲文–件系统（即低级磁盘I/O系统）不要求。１。文件类型指针（FILE类型指针）。２。文件的打开与关闭（fopen,fclose）。３。文件的读写（fputc，fgetc，fputs，fread，fwrite，fprintf，fscanf函数），文件的定位（rewind,fseek函数）。]]></content>
      <categories>
        <category>C语言</category>
      </categories>
  </entry>
</search>
